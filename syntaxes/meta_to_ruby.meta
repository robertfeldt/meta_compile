.syntax program

outarg = '$'              <'@out.print @token'> 
       | .string          <'@out.print ' $>;

out = '<' *outarg '>'     <'@out.print "\n"'>;

exp3 = .id                <'compile_' $>

     | .string            <'@in.scan /\s*/'>
                          <'s=' $>
                          <'l=s.length'>
                          <'@flag = (@in.peek(l) == s) ? (@token=s; @in.pos += l) : nil'>

     | '.id'              <'@in.scan /\s*/; @flag = @token = @in.scan /[A-Za-z]+[A-Za-z0-9_]+/'>

     | '.string'          <'@in.scan /\s*/; @flag = @token = @in.scan /\047[^\047]*\047/'>

     | '(' exp1 ')'

     | '.e'               <'@flag = true'>

     | '*' <'begin'> exp3 <'end while @flag'> <'@flag = true'>;

exp2 =  ( exp3 <'if @flag'> | out <'if true'> )
       *(   exp3          <'raise("error at: " + @in.rest.split("\n")[0]) if !@flag'>
          | out ) <'end'>;

exp1 = <'begin'> exp2
       *( '|' <'break if @flag'> exp2 )
       <'end while false'>;

rule = .id <'def compile_' $> '=' exp1 ';' <'end'>;

program = '.syntax' .id 
  <'#!/usr/bin/env ruby'> 
  <'require "strscan"'> 

  <'class C_' $> 
  <'  $c = self # so we can access it below if this is run from command line'> 
  <'  def compile(str, out)'>
  <'    @in, @out = StringScanner.new(str), out'>
  <'    compile_' $> 
  <'  end'>

    *rule '.end' 

  <'end # end of class'>

  <'if __FILE__ == $0'>
  <'  if ARGV.length != 1'>
  <'    puts("usage: " + $0 + " <input>")'>
  <'    exit -1'>
  <'  else'>
  <'    $c.new.compile(File.read(ARGV[0]), STDOUT)'>
  <'  end'>
  <'end'>;

.end