.syntax RMetaII

outarg = '$'     <'@o.print @t'>
       | .string <'@o.print ' $>;

out = '<' *outarg '>' <'@o.print "\n"'>;

exp3 = .id       <'compile_' $>
     | .string   <'@i.scan /\s*/; s=' $>
          <'@f = (@i.peek(s.length) == s) ? (@t=s; @i.pos += s.length) : nil'>
     | '.id'     <'@i.scan /\s*/; @f = @t = @i.scan /[A-Za-z]+[A-Za-z0-9_]+/'>
     | '.string' <'@i.scan /\s*/; @f = @t = @i.scan /\047[^\047]*\047/'>
     | '(' exp1 ')'
     | '.e'      <'@f = true'>
     | '*' <'begin'> exp3 <'end while @f'> <'@f = true'>;

exp2 =  ( exp3 <'if @f'> | out <'if true'> )
       *(   exp3 <'raise("error at: " + @i.rest.split("\n")[0]) if !@f'>
          | out ) <'end'>;

exp1 = <'begin'> exp2
       *( '|' <'break if @f'> exp2 )
       <'end while false'>;

stat = .id <'def compile_' $> '=' exp1 ';' <'end'>;

program = '.syntax' .id 
  <'#!/usr/bin/env ruby'> <'require "strscan"'>
  <'class ' $> <'def compile(str, out)'>
  <'@i, @o = StringScanner.new(str), out'>
  <'compile_program'> <'end'>
  *stat '.end' <'end'>
  <'begin; puts "Use: meta_compile <in> <out>"; exit; end if ARGV.length != 2'>
  <'File.open(ARGV[1], "w") {|f| RMetaII.new.compile(File.read(ARGV[0]), f)}'>;

.end